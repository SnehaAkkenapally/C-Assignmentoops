1. Six combinations of access modifier keywords and their functionality:
public: The member is accessible from any other code.
private: The member is accessible only within the class or struct it is declared in.
protected: The member is accessible within its class and by derived class instances.
internal: The member is accessible within the same assembly but not from another assembly.
protected internal: The member is accessible from within the same assembly or from derived classes.
private protected: The member is accessible only within its class and by derived classes within the same assembly.


2. Difference between static, const, and readonly:
static: Declares that a member belongs to the type itself, rather than to instances of the type.
const: A compile-time constant whose value is fixed and cannot change after compilation. It must be assigned at declaration.
readonly: A field that can only be assigned at the time of declaration or in a constructor, but can be modified at runtime (unlike const).

3. What does a constructor do?
A constructor is a special method used to initialize objects of a class. It is called when an object is created and sets initial values for fields or properties.

4. Why is the partial keyword useful?
The partial keyword allows a class, method, or struct to be defined in multiple files, making code organization easier and enabling collaboration by splitting code into manageable pieces.

5. What is a tuple?
A tuple is a data structure that allows you to store a fixed-size collection of values of potentially different types. In C#, you can define a tuple using syntax like (int, string, bool) and access elements using the Item1, Item2, etc., properties.

6. What does the C# record keyword do?
The record keyword defines a reference type that provides built-in functionality for value-based equality, immutability, and concise syntax for defining objects primarily used for holding data.

7. What do overloading and overriding mean?
Overloading: Defining multiple methods with the same name but with different signatures (parameters).
Overriding: Providing a new implementation of a method in a derived class that was defined as virtual or abstract in a base class.
8. Difference between a field and a property:
Field: A variable that holds data directly and is typically private.
Property: Provides a flexible mechanism to access and modify fields, often with get and set accessors that can have logic (e.g., validation).
9. How do you make a method parameter optional?
You make a method parameter optional by providing a default value in the method signature. For example:

csharp
Copy code
void MyMethod(int x = 10) { }
10. What is an interface and how is it different from an abstract class?
An interface defines a contract of methods, properties, or events that a class must implement. It cannot contain implementation. An abstract class can have both method declarations (abstract methods) and method implementations. A class can implement multiple interfaces but inherit from only one abstract class.

11. What accessibility level are members of an interface?
All members of an interface are implicitly public.

12. True/False: Polymorphism allows derived classes to provide different implementations of the same method.
True.
13. True/False: The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True.
14. True/False: The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True (but the new keyword hides the base class method, it doesn't override it).
15. True/False: Abstract methods can be used in a normal (non-abstract) class.
False.
16. True/False: Normal (non-abstract) methods can be used in an abstract class.
True.
17. True/False: Derived classes can override methods that were virtual in the base class.
True.
18. True/False: Derived classes can override methods that were abstract in the base class.
True.
19. True/False: In a derived class, you can override a method that was neither virtual nor abstract in the base class.
False.
20. True/False: A class that implements an interface does not have to provide an implementation for all of the members of the interface.
False.
21. True/False: A class that implements an interface is allowed to have other members that aren’t defined in the interface.
True.
22. True/False: A class can have more than one base class.
False.
23. True/False: A class can implement more than one interface.
True.